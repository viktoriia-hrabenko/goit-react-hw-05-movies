{"version":3,"file":"static/js/577.dd9c3ecd.chunk.js","mappings":"8LAEaA,E,OAAUC,GAAAA,IAAH,6D,SCCPC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,MAAM,UACNC,MAAM,MACNC,SAAS,EACTC,UAAU,2BAIjB,C,4HCZYC,EAAWN,EAAAA,GAAAA,GAAH,mOAURO,EAAWP,EAAAA,GAAAA,GAAH,iMAORQ,EAAYR,EAAAA,GAAAA,EAAH,yF,kBChBTS,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,+BACE,SAACJ,EAAD,UACGI,GACCA,EAAQC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACrC,OACE,UAACR,EAAD,YACE,gBACES,IACmB,OAAjBH,EACII,EADJ,0CAEuCJ,GAEzCK,IAAKJ,EACLK,MAAO,CAAEC,OAAQ,QAASC,OAAQ,YAEpC,SAACb,EAAD,UAAYM,KACZ,UAACN,EAAD,yBAAuBO,OAXVH,EAclB,OAIV,E,kBC1BYU,EAAUtB,EAAAA,GAAAA,QAAH,oGCkCpB,EA7Ba,WACX,OAA8BuB,EAAAA,EAAAA,UAAS,IAAvC,eAAOb,EAAP,KAAgBc,EAAhB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbM,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJV,EAAWU,EACZ,IACAC,OAAM,SAAAR,GAAK,OAAIC,EAASD,EAAMS,QAAnB,IACXC,SAAQ,WACPX,GAAa,EACd,GACJ,GAAE,CAACG,KAGF,gCACGJ,IAAa,SAACxB,EAAA,EAAD,IACb0B,IAAS,6CAAqBA,MAC/B,SAACL,EAAD,WACE,SAACb,EAAD,CAAaC,QAASA,QAI7B,C,8LChCD4B,EAAAA,EAAAA,QAAAA,QAAwB,+BACxB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,oGACLF,EAAAA,EAAAA,IAAA,mEACuCC,IAFlC,cACtBL,EADsB,yBAKrBA,EAASO,KAAKC,SALO,2CAAH,qDAQdC,EAAc,mCAAG,WAAMC,GAAN,uFACLN,EAAAA,EAAAA,IAAA,0DAC8BM,EAD9B,oBAC+CL,IAF1C,cACtBL,EADsB,yBAKrBA,EAASO,KAAKC,SALO,2CAAH,sDAQdG,EAAmB,mCAAG,WAAMjC,GAAN,uFACV0B,EAAAA,EAAAA,IAAA,6CACiB1B,EADjB,oBAC+B2B,IAFrB,cAC3BL,EAD2B,yBAK1BA,EAASO,MALiB,2CAAH,sDAQnBT,EAAe,mCAAG,WAAMpB,GAAN,uFACN0B,EAAAA,EAAAA,IAAA,6CACiB1B,EADjB,4BACuC2B,IAFjC,cACvBL,EADuB,yBAKtBA,EAASO,KAAKK,MALQ,2CAAH,sDAQfC,EAAe,mCAAG,WAAMnC,GAAN,uFACN0B,EAAAA,EAAAA,IAAA,6CACiB1B,EADjB,4BACuC2B,IAFjC,cACvBL,EADuB,yBAKtBA,EAASO,KAAKC,SALQ,2CAAH,qD","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/CastGallery/CastGallery.styled.js","components/CastGallery/CastGallery.jsx","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Loading = styled.div`\n  position: relative;\n  top: 10vh;\n`;","import { FallingLines } from 'react-loader-spinner';\nimport { Loading } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <Loading>\n      <FallingLines\n        color=\"#966844\"\n        width=\"100\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </Loading>\n  );\n};","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n    grid-gap: 16px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill,minmax(220px,1fr));\n    margin: 0 auto;\n    max-width: calc(100vw - 48px);\n    padding: 0;\n    list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  padding-bottom: 5px;\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n    0px 2px 1px rgb(0 0 0 / 20%);\n  border-radius: 0px 0px 4px 4px;\n`;\n\nexport const Paragraph = styled.p`\n  padding: 5px 10px;\n  font-size: 16px;\n  text-align: center;\n`;","import { CastList, CastItem, Paragraph } from './CastGallery.styled';\nimport imageNotFound from '../../images/imgNotFound.jpg';\n\nexport const CastGallery = ({ credits }) => {\n  return (\n    <>\n      <CastList>\n        {credits &&\n          credits.map(({ id, profile_path, name, character }) => {\n            return (\n              <CastItem key={id}>\n                <img\n                  src={\n                    profile_path === null\n                      ? imageNotFound\n                      : `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  }\n                  alt={name}\n                  style={{ weight: '400px', height: '372px' }}\n                />\n                <Paragraph>{name}</Paragraph>\n                <Paragraph>Character: {character}</Paragraph>\n              </CastItem>\n            );\n          })}\n      </CastList>\n    </>\n  );\n};","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  margin: 20px 20px;\n  padding-bottom: 20px;\n  border-bottom: 2px solid;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastGallery } from 'components/CastGallery/CastGallery';\nimport { Loader } from 'components/Loader/Loader';\nimport { getMovieCredits } from 'services/api';\nimport { Section } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieCredits(movieId)\n      .then(response => {\n        setCredits(response);\n      })\n      .catch(error => setError(error.message))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops, some error:{error}</p>}\n      <Section>\n        <CastGallery credits={credits} />\n      </Section>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.default.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '69096c6df3db45b0788fb44bda629200';\n\nexport const getTrendingApi = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieSearch = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return response.data.results;\n};"],"names":["Loading","styled","Loader","color","width","visible","ariaLabel","CastList","CastItem","Paragraph","CastGallery","credits","map","id","profile_path","name","character","src","imageNotFound","alt","style","weight","height","Section","useState","setCredits","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovieCredits","then","response","catch","message","finally","axios","API_KEY","getTrendingApi","data","results","getMovieSearch","query","getMovieDetailsById","cast","getMovieReviews"],"sourceRoot":""}